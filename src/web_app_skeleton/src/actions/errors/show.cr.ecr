class Errors::Show < Lucky::ErrorAction
  <%- if api_only? -%>
  default_format :json
  <%- else -%>
  default_format :html
  <%- end -%>

  def handle_error(error : Lucky::ParamParsingError)
    message = "There was a problem parsing the JSON params." +
              " Please check that it is formed correctly."

    <%- if api_only? -%>
    json ErrorSerializer.new(message), status: 400
    <%- else -%>
    if json?
      json ErrorSerializer.new(message), status: 400
    else
      render_error_page status: 500
    end
    <%- end -%>
  end

  def handle_error(error : Lucky::Exceptions::MissingNestedParam)
    <%- if api_only? -%>
    json ErrorSerializer.new("Missing param key: '#{error.nested_key}'"), status: 400
    <%- else -%>
    if json?
      json ErrorSerializer.new("Missing param key #{error.nested_key}"), status: 400
    else
      render_unhandled_error(error)
    end
    <%- end -%>
  end

  # When an operation fails to save return the validation message
  def handle_error(error : Avram::InvalidOperationError)
    <%- if api_only? -%>
    render_invalid_param_json(error)
    <%- else -%>
    if json?
      render_invalid_param_json(error)
    else
      render_unhandled_error(error)
    end
    <%- end -%>
  end

  private def render_invalid_param_json(error)
    invalid_attribute = error.errors.first
    name = invalid_attribute[0].to_s
    validation_messages = invalid_attribute[1]

    error_json = ErrorSerializer.new(
      "Invalid params",
      param: name,
      details: "#{name} #{validation_messages.first}"
    )
    json error_json, status: :bad_request
  end

  def handle_error(error : Lucky::RouteNotFoundError)
    <%- if api_only? -%>
    json ErrorSerializer.new("Not found"), status: 404
    <%- else -%>
    if json?
      json ErrorSerializer.new("Not found"), status: 404
    else
      render_error_page title: "Sorry, we couldn't find that page.", status: 404
    end
    <%- end -%>
  end

  # This is the catch all method that renders unhandled exceptions
  def handle_error(error : Exception) : Lucky::Response
    if Lucky::ErrorHandler.settings.show_debug_output
      # In development and test, render a debug page
      render_detailed_exception_page(error)
    else
      # Otherwise render a nice looking error for users
      render_unhandled_error(error)
    end
  end

  private def render_detailed_exception_page(error)
    log_error(error)
    Lucky::ErrorHandler.render_exception_page(context, error)
  end

  private def render_unhandled_error(error)
    log_error(error)
    message = "An unexpected error occurred"

    <%- if api_only? -%>
    json ErrorSerializer.new(message), status: 500
    <%- else -%>
    if json?
      json ErrorSerializer.new(message), status: 500
    else
      render_error_page status: 500
    end
    <%- end -%>
  end

  private def log_error(error)
    Lucky.logger.error(unhandled_error: error.inspect_with_backtrace)
  end
  <%- unless api_only? -%>

  private def render_error_page(status : Int32, title : String = "We're sorry. Something went wrong.")
    context.response.status_code = status
    render Errors::ShowPage, status: status, title: title
  end
  <%- end -%>
end
