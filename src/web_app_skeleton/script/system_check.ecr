#!/usr/bin/env bash

BOLD_RED_COLOR="\e[1m\e[31m"

# Prints error and exit.
# example:
#   print_error "Redis is not running. Run it with some_command"
print_error() {
  printf "${BOLD_RED_COLOR}There is a problem with your system setup:\n\n   ${BOLD_RED_COLOR}$1 \n\n"
  exit 1
}

# Use this script to check the system for required tools and process that your app needs.
# A `print_error` function is provided as a helpful way to display a custom
# error message, and exit the script when a process fails, or is missing.
#
# A few examples might be:
#   * 'lucky db.verify_connection' to test postgres can be connected
#   * Checking that elasticsearch, redis, or postgres is booted
#   * Booting additional processes for things like mail, background jobs, etc...
#     should go in your Procfile.dev.

<%- if browser? -%>
if ! command -v yarn > /dev/null; then
  print_error "Yarn is not install\nSee https://yarnpkg.com/lang/en/docs/install/ for install instructions."
fi
<%- end -%>

# Only if this isn't CI
if [ -z "$CI" ]; then
  lucky ensure_process_runner_installed
fi

if ! command -v createdb > /dev/null; then
  MSG="Please install the postgres CLI tools, then try again."
  if [[ "$OSTYPE" == "darwin"* ]]; then
    MSG="$MSG\nIf you're using Postgres.app, see https://postgresapp.com/documentation/cli-tools.html."
  fi
  MSG="$MSG\nSee https://www.postgresql.org/docs/current/tutorial-install.html for install instructions."

  print_error "$MSG\n"
fi


# Return $SHELL if no error is raised to allow the process runner to continue.
$SHELL
